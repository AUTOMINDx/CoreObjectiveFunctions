Would a dual-port SRAM be an appropriate way to interface a microcontroller with a Gameboy as if the MCU were a cartridge?
I just watched [this](https://youtu.be/QS4fzElm8zk) video about a guy who made a WiFi-enabled Gameboy cartridge with an ESP32. One of the biggest problems that people have with making these “emulated cartridges” is that we can’t generally run microcontrollers fast enough to have enough MCU clock cycles to do anything useful between GB CPU memory cycles. This person’s solution was to store the bulk of the code on an EEPROM, and roll some custom hardware logic to map 2 bytes of the GB memory space to the MCU. The unfortunate side effect of this is that the MCU can’t go bit-fiddling in the EEPROM, so you’re stuck with whatever code you ship on there.

It strikes me that a dual-port SRAM module would be the perfect alternative. You don’t even really need a direct connection between the MCU and the GB CPU, save for whatever interrupts you may care about. It could all route exclusively through the SRAM, right? The GB CPU could be allowed to memory cycle as much as it wants to, and the MCU could update all of the code at will or just go bit-fiddling to change some values. Obviously you’d need some multithreading-esque glue logic, but what am I not seeing here?

In case you don’t want to watch the video, [here’s the blog post instead](https://there.oughta.be/a/wifi-game-boy-cartridge).